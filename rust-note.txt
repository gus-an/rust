RUST

https://doc.rust-lang.org/book/ch01-03-hello-cargo.html

RUST IS
- expression-based language
  - statement : perform action and 'do not' return a value
    - statement cannot be assigned to a variable
    - (ex) let x = (let y = 6)
    - (ex) x = y = 6
    - statement don't evaluate to a value, which is expressed by '()', an empty tuple
  - expression : evaluate to a resulting value
    - function / macro is an expression
    - expressions do not include ending semicolons
- needs to know at compile time what 'type' a variable is
  - 'if' and 'else' block cannot have different type
- gives you control over your memory usage, having the owner of data
  automatically clean up that data when the owner goes out of scope

RUST HAS
- strong, static type system
  - type must be known at compile time
  - four primary : integer, floating point, boolean, characters
- immutable variables as default
  - safety, easy concurrency
- snake_case as conventional style for 'function' and 'variable' names
- three kinds of loops
  - 'loop' : execute until explicitly told to stop with 'break'
    - use of 'loop' is to retry an operation you know might fail, 
      such as checking whether a thread has completed its job
    - you can return a value when you 'break'
  - 'while' : evaluate condition within a loop
  - 'for' : execute some code for each item in a collection
    - less error prone
    - more efficient, there isn't checking condition for each loop
    - most commonly used loop construct in Rust
- prevention for data races
  - very restricted allows for mutation
  - no two or more pointers access same data at same time
- automatic referencing and dereferencing
  - when you call a method 'object.something()', Rust automatically adds in 
    '&', '&mut', or '*' so 'object' matches the signature of the method.
  - (ex) p1.distance(&p2);
  -      (&p1).distnace(&p2); are same
- doesn't have 'null', but have enum that can encode the concept of value being absent or present
  - ensures types such as 'i8' always have a value


DEFINITIONS
- crate : packages of codes
- Cargo.lock : keeps track of exact versions of dependencies in project
  - created first time you ran 'cargo build'
  - when you build in future, Cargo will see 'Cargo.lock'
- Crates.io : where people in Rust ecosystem post their open source Rust projects
- trait: there are multiple traits in a crate (ex. rand::Rng, rand:Rand)
- shadowing : allows you to reuse a variable
  - creating a brand-new variable
  - use 'let' keyword again
  - different from 'mut' variables
    - has to use 'let' keyword
    - can change the type of value
- constants
  - use 'const' keyword
  - must be annotated
  - can be declared at any scope, including global
  - are valid for the entire time a program runs
  - may be set only to a contant expression (not result of a function call, or values computed at runtime)
- tuples
  - fixed length, cannot shrink or grow
- array
  - every element must have same type
  - has fixed length
  - helpful allocating data on stack (rather than heap)
    - array is single chuck of memory allocated on the stack.
- vector
  - allowed to grow or shrink
- function
  - doesn't matter where to define a function
  - parameter's 'type' must be declared
  - return value of the final expression(no semicolon) in the block of the body
    - you can return early by using 'return' keyword
- ownership
  - stack : fixed size
    - data are close to other data
    - when function is called, values passed to fn and fn's local variables are pushed onto stack
    - basic types are all stored on stack, and popped off when scope is over
  - heap : size that might change
    - OS finds empty spot in heap that is big enough, returns pointer
    - slower when accessing data, you have to follow a pointer
    - data are farther away from other data
  - ownership keeps track of what parts of code are using what data on heap,
  - minimize duplicate data on heap, clean up unused data on heap
  - Rules
    - 1. Each value in Rust has a variable that's called its 'owner'
    - 2. There can only be one owner at a time
    - 3. When the owner goes out of 'scope', the value will be dropped
  - Rust automatically return memory once the variable that owns it goes out of scope
    - pair exactly one 'allocate' with one 'free'
    - special function 'drop' is called when closing curly bracket
  - Rust will never automatically create 'deep' copy of your data
  - 'clone' : create deep copy of heap data
- string literals
  - immutable
  - know content at compile time, text is hardcoded into executable
  - fast and efficient
  - copy makes duplication on stack
  - let s = "hello world!"
    - type of 's' is '&str' : a slice pointing to specific point of binary
    - this is immutable reference -> reason why string literals are immutable
- String
  - growable, mutable, owned, UTF-8 encoded
  - able to store an amont of text that is unknown at compile time
  - allocate an amount of memory on the heap
    - memory must be requested from os at runtime (String::from)
    - need a way of returning this memory to os when done with it
  - 'move' : copy only copies pointer to memory, and invalidates original one
    - prevents 'double free error'
  - 'OsString', 'OsStr', 'CString', 'Cstr' are in Rust library
  - don't support indexing
    - 'String' is wrapper over a 'Vec<u8>'
    - not all characters are 1 byte long
    - Rust has to count how many valid characters, so don't take O(1)
- 'copy' trait
  - 'copy' traits are stored on the stack
  - if a type has 'copy' trait, an older variable is still usable after assignment
  - all basic types are 'copy'
  - tuple of basic types are 'copy'
  - any type with 'drop' trait cannot be annotated as 'copy' trait 
- references
  - & ampersands : refer to some value without taking ownership of it
  - compiler guarantees references will never be dangling
    - will ensure that data will not go out of scope before the reference to it does
- dereference
  - * asterisk
- borrowing
  - having references as function parameters
  - cannot modify something's we're borrowing
- slice
  - does not have ownership
  - reference a contiguous sequence of elements in a collection rather the whole
  - internally, slice stores starting position, and length of the slice
  - helps to find error at compile time
- struct
  - custom data type that lets you name and package together multiple related values
  - more flexible than tuple, don't rely on order of data
  - struct is allowed to have multiple 'impl' blocks
- tuple structs
  - have struct name, but don't have names associated with their fields, just types
  - useful when you want to give whole tuple a name, make it different from others
- unit-like structs
  - structs that don't have any` fields
  - userful when implement a trait on some type but don't have any data
- method
  - functions that are defined within the context of a struct (or enum or trait object)
  - first parameter is always 'self', which represents the instance of struct the method is called on.
- associated functions
  - functions defined inside 'impl', whose parameter doesn't use 'self'
  - '::' syntax is used for associated functions and namespaces created by modules
- enumeration
  - used when we can enumerate all possible values
- option
  - enum defined by standard library
  - can be somthing or nothing
  - need to explicitly handle the case when the value is null
    - 'match' expression
- match
  - matches in Ruse are exhaustive
    - compiler comfirms that all the possible cases are handled
  - can match any type, 'if' only matches 'bool'
- collections
  - data are stored on heap : amount of data need not be known at compile time
    - are 'dropped' when out of scope
  - vectors
    - allows you to store a variable number of values next to each other in memory
    - more than one value in single data
    - only store values of the same type
  - string
    - collection of characters(bytes)
    - String type
  - hash map
    - allows you to associate a value with a particular key.
    - a particular implementation of more general data structure called 'map'
    - useful when you want to look up data not by using index, but using a key
    - need to import using 'use'
    - has keys of type 'String' and of type 'i32'
    - like vectors, is homogeneous (all keys are same type, values are same type)

PROJECT MANAGEMENT
.
├── Cargo.lock
├── Cargo.toml
├── benches
│   └── large-input.rs
├── examples
│   └── simple.rs
├── src
│   ├── bin
│   │   └── another_executable.rs
│   ├── lib.rs
│   └── main.rs
└── tests
    └── some-integration-tests.rs

- Packages
  - contains multiple binary crates and optionally one library crate
  - Cargo feature that lets you build, test, and share crates
  - contains a 'Cargo.toml' that describes how to build crates
  - 'src/main.rs' : crate root of binary crate with same name as the package
  - 'src/lib.rs' : crate root of library crate with same name as the package
  - if a package has 'src/main.rs' and 'src/lib.rs', it has 2 crates
  - 'src/bin' : directory for multiple binary crates
- Crates
  - tree of modules that produces a library or executable
  - crate root
    - source file that Rust compiler starts from
  - a crate will group related functionality together,
    functionality provided by a crate is accessible through the crate's name
  - different crates have independent namespaces
- Modules and Use
  - let you control the organization, scope, and privacy of paths
  - start by 'cargo new --lib lib_name'
  - modules can hold definitions for other items, 
    such as 'structs', 'enums', 'contants', 'traits', 'functions'
  - putting inside a module makes an item 'private'
    - functions, methods, structs, enums, modules, contants are 'private' by default
    - items in parent module can't use private items inside child modules
    - items in child modules can use items in their ancestor modules
  - module tree : crate's module structure
    - module named 'crate' at the root
  - 'pub' : makes a module, function .. public
    - 'pub struct' : makes a struct public, but struct's fields are still private
    - 'pub enum' : all variants are also public
- Paths
  - a way of naming an item, such as a struct, function, or module
  - absolute path
    - starts from crate root by using a crate name or a literal 'crate'
  - relative path
    - start from the current module and uses 'self', 'super', 
      or an identifier in the current module
  - both absolute and relative paths are followed by '::' + one or more identifiers
  - 'use'
    - idiomatic way of bringing a 
      - 'function' into scope is to call it's parent module
      - 'struct', 'enum', other items is to specify the full path
  - re-exporting 
    - use of 'pub use', bring an item into scope, let that item be brought by others too
- Use of library
  - std : use 'use' keyword, no need to change 'Cargo.toml'
  - anything else : change 'Cargo.toml', and use 'use' keyword

CARGO INSTRUCTION
- cargo new hello_cargo
- cargo new --lib restaurant
- cargo build : compile -> build exe
  - --release : compile with optimizations
    - create exe in 'target/release', not 'target/debug'
    - use for benchmarking running time
- cargo check : compiles, don't build exe
- cargo run : build and run
- cargo update : ignore 'Cargo.lock' and figure out latest ver specified in 'Cargo.toml'
- cargo doc --open : build doc provided by all your dependencies and open a browser

TROUBLESHOOT
[1] Cargo.toml -> [dependencies] -> rand = "0.3.14" -> cargo build ����� ����.
- cmd �� ����� ��
- setx CARGO_HTTP_CHECK_REVOKE "false" �غ� ��